(define append 
    (lambda(lst1 lst2)
        (if (eq? lst1 '())
            (if (eq? lst2 '())
                '()
                (cons (car lst2 ) (append lst1 (cdr lst2))))
            (cons (car lst1) (append (cdr lst1) lst2)))
    )
)

(define reverse 
  (lambda (lst)
      (if (eq? lst '())
          '()
          (append(reverse(cdr lst))(cons(car lst) '())))
  )
)

(define duplicate-items
    (lambda (lst dup-count)
        (if (> (length lst ) (length dup-count))
            (duplicate-items lst (append dup-count dup-count))
            (duplicate lst dup-count))
    )
)

(define duplicate
    (lambda (lst dup-count)
        (if (eq? lst '())
            '()
            (if (eq? (car dup-count) 0)
                (duplicate (cdr lst) (cdr dup-count))
                (cons (car lst) (duplicate lst (append (cons (- (car dup-count) 1) '()) (cdr dup-count)))))) 
    )
)

(define length
    (lambda (lst)
        (if (eq? lst '())
            0
            (+ 1 (length (cdr lst))))
    )
)


(define payment
  (lambda (n coins-lst)
        (if (eq? n 0)
            1
            (if ( < n 0)
                0
                (if (eq? coins-lst '())
                    0
                    (+ (payment (- n (car coins-lst)) (cdr coins-lst))
                        (payment n (remove-all (car coins-lst) (cdr coins-lst)))))))
    )                       
   
)

(define remove-all
  (lambda (x lst)
    (if (eq? '() lst)
        lst
        (if (eq? (car lst) x)
            (remove-all x (cdr lst))
            (cons (car lst) (remove-all x (cdr lst)))))))



(define next-differnt-coin
    (lambda (num coins-lst)
        (if (eq? coins-lst '())
            coins-lst
            (if (eq? num (car coins-lst))
                (next-differnt-coin num (cdr coins-lst))
                coins-lst))
    )
)

                               
(define compose-n
    (lambda( f n)
          (if (eq? n 1)
              f
              (compose f (compose-n f (- n 1))))
    )
)

(define compose
    (lambda( foo1 foo2)
      (lambda (x)(foo1 (foo2 x)))
    
    )
)